class Comment {
    constructor (text) {
    this.text = text
    this.votesQty = 0
    }
    upvote() {
        this.votesQty +=1
    }
}
// в данном примере в методе constructor есть два присваивания и один параметр (text)
// При вызове метода constructor мы передаем значение для параметра (text)-строка например
// а далее внутри конструктора мы конкретному экз-ру этого класса Comment добовляем сво-во this.text
// и значением этого св-ва .text будет значение параметра (text) которое было переданно 
// в качестве аргумента в вызове этого метода constructor 
// тоесть у нового экземпляра этого класса (class Comment)появится собс-ое сво-во .text с тестовым знач
// и таким же образом мы добавили сво-во this.votesQty а 0 означает начальное кол-во голосов
// constructor вызывается когда мы создаеи новый экз-р конкретного об-та др.словами мы хотим создать
// новый комментарий с неким текстом и у этого коментария будет опр кол-во голосов(можно голосовать)
// а когда мы создаем новый экз-р комментария у него не будет еще голосов = 0
// и далее мы видим метод upvote() - и это фун-ия внутри которой мы увеличиваем значение .votesQty +=1
// тоесть после создания класса можно будет увеличивать кол-во голосов для конкретного коментария
// путем вызова метода upvote() и этот метод находится на уровне класса и он не будет присвоен
// как отдельный метод конкретного экз-ра этого класса комментарий но будет наследоваться 
// всеми экземплярами этого класса коментарий

const firstComment = new Comment('First Comment')
// а здесь мы создаем новый экз-р такого class Comment используя префексный унарный оператор new 
// new Comment('First Comment') скобками мы вызываем фун-ию и в них стоит знач для пара-ра (text)
// именно таким синтаксисом вызывается функция constructor которая создает новый экз-р об-та
//  в ('First Comment') мы передаем текстовое знач для сво-ва .text
// и в этоге фу-я constructor вернет новый объект и этот об-т будет наследовать все методы class Comment
// и class Comment будет прототипом для такого экземпляра  
