const myPromise = new Promise((resolve,reject) => {
// тело фу-ии (resolve или reject)
})
// Конструктору который вызывается при создании нового экз-ра Promise мы передаем в качестве аргумента
// колбек функцию,у нее должно быть обязательно два параметра (resolve,reject)
// и в теле колбек функции мы вополняем одну из фу-й resolve или reject(т.к.это тодже функции)
// в зависимости от ответа сервера!(ответ-resolve или ошибка - reject)

fetch("https://jsonplaceholder.typicode.com/todos/1")
.then(response =>  response.json())
.then(json => console.log(json))
.catch(error => console.error(error.message))
// здесь описанно как мы будем работать с резу-ом промиса
// При отправке fetch-запроса он возвращает промис и когда сервир ответит либо выдаст ошибку
// тогда то и вызовется одна из колбэк фун-ий. в первом ответе приходит много служебной информации
// мы этот ответ присваиваем как знач (параметру response) и вызываем метод json() чтобы получить данные
// json() так же возвращает промис и поэтому мы еще раз вызываем метод .then и вот в нем знач для пар-ра
// json будет JS об-т(либо массив об-ов).А catc будет задей-ан если ответом на первые два вызова then
// будет ошибка и она будет передана как знач для пара-а error и напечатана в консоль(как здесь)

//промисы! позволяют отробатывать отложенные во времени события(или обещание предоставить резу-ат позже)
// при отправке запроса на удаленный сервер мы не знаем резу-ат запроса,а с помощью промиса мы можем
// поставить на "ожидание" получение резу-та!и при получении мы можем его обрабатывать!
// У созданного объекта myPromise будут доступны два метода .then и .catch
// Методу .then мы пердаем в качестве аргумента фу-ию.и в ней будут выполняться действия в случ успешног
// исполнения промиса и знач пар-ра будет равно знач которое было передано фу-ии resolve внутри промиса
// В вызове метода catch в кач пара-а будет ошибка(error) и это колбэк фун-ия!
// И этом блоке выполняются дей-ия в случае отклонении промиса

{userId: 1, id: 1, title: 'delectus aut autem', completed: false}
// это пример успешного исполнения промиса(ответа сер-ра)как в первом случае который вернула фу-ия fetch
// так и второй который вернул метод json() по цепочке 